/// Source : https://adventofcode.com/2020/day/20#part2
/// Author : liuyubobobo
/// Time   : 2020-12-23

#include <iostream>
#include <fstream>
#include <vector>
#include <cassert>
#include <unordered_map>

using namespace std;


class Piece{

public:
    const static int S = 10;

public:
    int id;
    vector<string> g;

    Piece(int id, const vector<string>& g): id(id), g(g){
        assert(g.size() == S);
        for(const string& s: g) assert(s.size() == S);
    }
};

void rotate(vector<string>& g){

    int S = g.size();
    vector<string> g2(S, string(S, ' '));
    for(int i = 0; i < S; i ++)
        for(int j = 0; j < S; j ++)
            g2[j][S - 1 - i] = g[i][j];
    g = g2;
}

void flipV(vector<string>& g){
    for(string& s: g)
        reverse(s.begin(), s.end());
}

void flipH(vector<string>& g){

    int S = g.size();
    for(int col = 0; col < S; col ++){
        int i = 0, j = S - 1;
        while(i < j){
            swap(g[i][col], g[j][col]);
            i ++; j --;
        }
    }
}

class Solution{

private:
    int side;

public:
    void get_image(vector<Piece>& pieces){

        side = sqrt(pieces.size());
        assert(side * side == pieces.size());

        vector<vector<int>> res(side, vector<int>(side, 0));
        vector<bool> used(pieces.size(), false);
        bool tag = dfs(pieces, 0, 0, used, res);

        for(const vector<int>& row: res){
            for(int e: row) cout << e << '\t';
            cout << endl;
        }
        assert(tag);

        vector<string> image(side * (Piece::S - 2), string(side * (Piece::S - 2), ' '));
        for(int i = 0; i < side; i ++)
            for(int j = 0; j < side; j ++)
                for(int x = 0; x < Piece::S - 2; x ++)
                    for(int y = 0; y < Piece::S - 2; y ++)
                        image[i * (Piece::S - 2) + x][j * (Piece::S - 2) + y] = pieces[res[i][j]].g[x + 1][y + 1];

        cout << "{";
        for(const string& s: image)
            cout << "\"" << s << "\"," << endl;
        cout << "}" << endl;

        return;
    }

private:
    bool dfs(vector<Piece>& pieces, int x, int y,
             vector<bool>& used, vector<vector<int>>& res){

//        cout << x << " " << y << endl;
        if(x == side) return true;
        if(y == side) return dfs(pieces, x + 1, 0, used, res);

        for(int i = 0; i < pieces.size(); i ++)
            if(!used[i]){

                for(int r = 0; r < 4; r ++){
                    if(ok(pieces, res, i, x, y)) {
                        used[i] = true;
                        res[x][y] = i;
                        if (dfs(pieces, x, y + 1, used, res)) return true;
                        used[i] = false;
                        res[x][y] = -1;
                    }

                    if(r < 2) {
                        flipV(pieces[i].g);
                        if (ok(pieces, res, i, x, y)) {
                            used[i] = true;
                            res[x][y] = i;
                            if (dfs(pieces, x, y + 1, used, res)) return true;
                            used[i] = false;
                            res[x][y] = -1;
                        }
                        flipV(pieces[i].g);

                        flipH(pieces[i].g);
                        if (ok(pieces, res, i, x, y)) {
                            used[i] = true;
                            res[x][y] = i;
                            if (dfs(pieces, x, y + 1, used, res)) return true;
                            used[i] = false;
                            res[x][y] = -1;
                        }
                        flipH(pieces[i].g);
                    }

                    rotate(pieces[i].g);
                }
            }
        return false;
    }

    bool ok(const vector<Piece>& pieces, vector<vector<int>>& res, int index, int x, int y){

        if(x - 1 >= 0){
            if(!ok(pieces[res[x - 1][y]], pieces[index], 0)) return false;
        }

        if(y - 1 >= 0){
            if(!ok(pieces[res[x][y - 1]], pieces[index], 1)) return false;
        }

        return true;
    }

    bool ok(const Piece& p1, const Piece& p2, int type){

        string a = "", b = "";
        if(type == 0){
            a = p1.g.back();
            b = p2.g[0];
        }
        else{
            for(const string& s: p1.g) a += s.back();
            for(const string& s: p2.g) b += s[0];
        }

        assert(a.size() == b.size() && a.size() == Piece::S);
//        cout << a << " " << b << endl;
        return a == b;
    }
};

class Solution2{

public:
    int find_monster(vector<string>& image){

        vector<string> pattern = {
            "                  # ",
            "#    ##    ##    ###",
            " #  #  #  #  #  #   ",
        };

        int find_num = 0, res = 0;
        for(int r = 0; r < 4; r ++){
            if(exist(image, pattern)) {
                find_num ++;
                res = get_res(image, pattern);
            }

            if(r < 2) {
                flipV(image);
                if(exist(image, pattern)) {
                    find_num ++;
                    res = get_res(image, pattern);
                }
                flipV(image);

                flipH(image);
                if(exist(image, pattern)) {
                    find_num ++;
                    res = get_res(image, pattern);
                }
                flipH(image);
            }
            rotate(image);
        }

        assert(find_num == 1);
        return res;
    }

private:
    bool exist(const vector<string>& image, const vector<string>& pattern){

        int R = image.size(), C = image[0].size();
        int pr = pattern.size(), pc = pattern[0].size();

        for(int i = 0; i + pr <= R; i ++)
            for(int j = 0; j + pc <= C; j ++){

                vector<string> part;
                for(int k = 0; k < pr; k ++)
                    part.push_back(image[i + k].substr(j, pc));
                if(ok(part, pattern)) return true;
            }
        return false;
    }

    bool ok(const vector<string>& part, const vector<string>& pattern){

        assert(part.size() == pattern.size() && part[0].size() == pattern[0].size());

        for(int i = 0; i < pattern.size(); i ++)
            for(int j = 0; j < pattern[i].size(); j ++){
                if(part[i][j] == 'X') return false;
                if(pattern[i][j] == '#' && part[i][j] != '#') return false;
            }
        return true;
    }

    int get_res(vector<string>& image, const vector<string>& pattern){

        int R = image.size(), C = image[0].size();
        int pr = pattern.size(), pc = pattern[0].size();

        int total = 0;
        for(const string& row: image)
            for(char c: row) total += (c == '#');

        int monster = 0;
        for(int i = 0; i + pr <= R; i ++)
            for(int j = 0; j + pc <= C; j ++){

                vector<string> part;
                for(int k = 0; k < pr; k ++)
                    part.push_back(image[i + k].substr(j, pc));

                if(ok(part, pattern)){
                    monster += 15;
                    for(int ki = 0; ki < pr; ki ++)
                        for(int kj = 0; kj < pc; kj ++)
                            image[i + ki][j + kj] = 'X';
                }
            }
        return total - monster;
    }
};

int main() {

//    ifstream input;
////    input.open("../../input_test_1.txt"); // 20899048083289
//    input.open("../../input.txt");
//    assert(input.is_open());
//
//    string line;
//    vector<Piece> v;
//    while(!input.eof()){
//        getline(input, line);
//        int cindex = line.find(':');
//        assert(cindex != string::npos);
//        int id = atoi(line.substr(5, cindex - 5).c_str());
//
//        vector<string> g;
//        while(true){
//            getline(input, line);
//            if(line == "") break;
//            g.push_back(line);
//        }
//        assert(g.size() == Piece::S);
//        v.push_back(Piece(id, g));
//    }
//
//    cout << Solution().get_image(v) << endl;
//
//    input.close();

    vector<string> image =
            {"..#...#.#..#...#...#.##.....#.##.#.......#....#..#.......#..............#...#....##...#..#.#....",
             "....#.........#..##.....#.#...#...........#.#..#......#..#.....#....##.#....#.#...#..##.....#..#",
             "..##..#.#.##...#...#..#....##..#....#..#.........#...................##.##.#...............##.#.",
             "...........#.............#...#.#.#....#......#.........##....#.#...#.#.##..#.............#.#....",
             "..#........#.....#.#....##.#.....#....#.#.................#..##...#..##.#.####......####..#.....",
             ".#....#........#..##.....#..#...#...............#..#............#.#...#..#....#......#.#...##..#",
             "..#....#...#...#.....##..###.......#....##....#....#....#..#..........#..#.......#........######",
             "....###.........#...#.#.#.##...##.....................#...#.#....#...#....#.......#...###..#....",
             "..#.......#.......#..#......###.............#........................###.#.....#.#......#...##..",
             ".....#...#...#..##..#....##..#..##......#.......................#...#...#.......#.#...#..#...#.#",
             "..#.#..##.....#....##..#.#............#.##.#............#..##.....####..#...#....##....#..##....",
             "..#....#.....#...........#.#..#...#....##....#....#.#..###...##.#...#..#.##.##.##......#.##.#..#",
             ".....#...........#.#.....##.............#.....#.....###.#.......#.#..#........#......#.....##.#.",
             "....##....#.#...#.##.....#..#..##........#.#..#..#....#..##......#........#.......#......#.#..#.",
             "...#.#...........#..###.#.....#.......#..#.#....##.#..#....#....#.##...#.#...##...........####..",
             "#....##...#.....#..##....##..##..###...#........##...#.##.#.#........#.##........##...#...#..#..",
             "...#...##.......#...#..#.#...##.#..##...##......#.#......#.#..#.#...#...#.#..........##......#..",
             "............#....##..#...#.....#.##.#.#.##......#...##..#..#..##....#....##.#..#..#.......###...",
             "..#.#.#...#.......#.#.....###.....##..#.#.........#...#.#...#..#..#..#......##..#..#...#..###...",
             "..#..###.##..#....##.#.....#.....#..#..###...##...#..#...#..#...........##.#...#...........#.#..",
             ".....#...##.....#.#.##.#.....####...#......#.##..#......#.....#.......##.##...##..##...#....##..",
             "..#..##.#..#........#.#.####.##.##.#.....##......#...#..#####.#....#.#..##.#.#.##..##...........",
             "#....##....#......#.###..#....#......#...#..##..#.##.....##......#.##...........#...##.......#..",
             "##.#..#...#...#....#.##........#....#...#.##............#.#..#....###....#..#......##.......#...",
             "....#.#....#....#.#....................##..........#.#..#..####......#..#...........#..#.###....",
             "#....#....#.#..##.#.#....#.#..#.#.#..#...#.#...#..#.#....#...#......###..#....#.#.#..#.....##...",
             ".#...#....#..#..#.#..#........###.....#...#.#....##..#.#...#..#....#.......##..#...#.......##...",
             "......##...#......#.#.........#.....#............#..............#....#...##.##.#...##.#.###.....",
             "..#...#.#.#..##.##.##.##......##..#......#........###....#....#.....##..#.#...#.##...#.#.#.#....",
             "#.#......#..#.#....####.#..#...#........#....#........#.##..#.##.##....#..##.###....#...##.#....",
             "#.....#..#.#.....#......#......#...#.....#..#.....#.#......#.#..#........###......#.#....#....##",
             ".....###..#.#.##.#...#...#....#.......#...#....#.##......#...####.#..#.....#....##...#.#..#....#",
             "#........##...#......##..#.....#...#.##....#.....#.........##.#..##............#.#.........#....",
             "##........##........#.#.....#.##....#.#.#.#.#.........#...#......###..#........#...#..........#.",
             ".......##.....##..#...#......###.#.##..#..........#..##..#.#......##.......#....#....#....#...#.",
             "..#....#.#.#####.#..#..#........#..##..#.#....#...#####.#.##..#..................#..#...##....#.",
             ".##.#.####.#.#.##.#...#...#.#..#.....#......#.#........#.....##.......##.......#....#....#..##.#",
             ".....##.#.#.#...#.....##.................#..#...#.......###..##...##............#...##....#.....",
             "....#.#.....##........#......#...#..##..........##...#........#...##.........#.#.#.##...........",
             "#..#...#.....###.##.#.#.........#.#.##..#..#.#....#....#......#.#.#...##.#..#.....#.#........##.",
             "#...#.....#.#.#..##..#...#..#.......#.#...##.##..##..##.#....#..#..#...##.#.#......#.##...#.....",
             "................#.#....#..#..#..#...#......###.#..#...#....#..##.......##.........#.#..#.#......",
             "#.....##...##..#..##.....#.#.#.##....#.......####.###..#..#.##.....#....#...#..#..#...##.##.....",
             "..#.####....#....#.#.#..##......#..##....#....##...#.#........#....#..##.#....#...#....#..#.#...",
             "#.....#.#..#..##..#...#....#....#.........#...###.......#.....#...#.......##....###..#....####.#",
             "#.#.#..#.#.....#.#.##..#......#....#.#...#.........##.##...#...##.#...#..#......#............#..",
             "......#......#.#..#...#....#...#..#.#.........#...##..#..##........#...####...#.#......#..#.#...",
             "....#....#....#...#...#..#.#...#.#..#........#....#.###.......#.#..#...###...............##.#...",
             "#.#.#..#..........##..#....#..#..#...#.#...#.#...###...###...##....#..#.#...##..#.#..#.........#",
             ".##...#...#..##....#......###...#..###....#...###.##...............##....####..#.....#.........#",
             "..#...#.....#.#...#....#....#..........#....#.#..#............#.#.#.......#......#...###.#......",
             "...#..##.#.##..#...##.#..............#.........#...##..#....####..#..#.##.........#..#........#.",
             "...##.##..........#....##....#......#...#...###..##...#...#.#..##...#....#......##....#.....#...",
             "#....#......#..#..##.#####..#........#..##...#....##...#...##......#.##.#..#..#.#....#.##.#.#...",
             "...#...#.##.....#.##..#.##..................##.....#......#.#........##.#.......#..##..####..#..",
             ".##..###.....#.......#..#....#.#......##..#.####......##.....#......##...#...#.....#..##........",
             ".###..#.#...#.....#..........#..#.#......................#.#.#....##..#...#.#...#..#.....#.....#",
             "#..#..#.....#......#...#.....#......#..........##..#......#.#......#.......#.#...#..............",
             "#..#.#.......#.##.#...#..#........#..##.......##..#.......##.#..##.......#.##......#..#...#.....",
             "#...#...#...........#..#.......#........##.###....#.###.#####...........#..#...#..............##",
             "#.##...#.......##.......##.#....##.....##.....##...#.#.....##......#..#...#...#..#.#.#..###.#.#.",
             "..#........#..........#.#.....#..##...#..#..#..#.........##..#.#..##......##......#.##.#.....#..",
             ".##......##.#...#....##.#.......##....#.##........#..#..#.#..#.#...#...##..##.......##.#..#...#.",
             "...#.....#...#.......###...#....##..#..#...#............#.....##....#...........#....##....##.##",
             "....#..#.........###...#..#.....#.#.#.........#......#.#.##..#....#......#......#.#.....#.#...#.",
             ".......#...#.........###.#.#...#.....#.#.#...##..#........###...#.......##.#...#................",
             "...##..#...#.##..........#.#...##....#.##....##.......##....#.......#........#.......###..#..###",
             "..#..#......##.##......#####......#..........##..#...##.#.##.#.#..###.##....##..#.#..#..##......",
             ".##....##..##....#.#..#....#.....#...#..#......#....#.#.........#..##.....##.#....##.#.....#....",
             ".#.#........#..#.#....#.....#....#.....##...#..#...#.#.#............#....#...####..#..##........",
             "....#.....#.##.#....#..#....####..#...##........#............#....#..#.#..##......#....#..#.....",
             ".....#.#..##.........#............#....#.##.#.####.....#.#..#..#.##.......#....#.....#..#...#..#",
             ".#..#.###.#....##......#..#.#......#....##....#........#..##.....#####....##..##...#..#.#.#.....",
             ".##..#.#.....###.#..####...#.....##.#..#......#.##....#.......#....#.#.#.....#.......#..###...#.",
             ".#.....##...#....#...##....#....###.#........#.#....#.###.....#....#.#...#####..#...##...##....#",
             "............#......#..#...######.#.....###....#....#..##...#........#..#......#.......#....##...",
             "##...........#.........###........#....#.....#.....#..#.###..#.#..#...###.....##..#.......#..#..",
             "#...#...##...##......#.#...#...........#.....#.#...#..#.###.......#.#..#.........#.#......#..#.#",
             "...#...#....#.......#..#.#..##........#.#.....#.#..##..#.....#..#..##....#....#..##.#.###..#....",
             "#......#.....#....#..#.##..#....#.#...###..#.##.......#..#.......#.##.#......#.......#....#...##",
             "........#..##.....#..##....#....##.............##..#.##..#..#...#........#...#......#.#...#.....",
             "..##.......##..............###....#.##..##.#####....#..##..#.##.....##.#.#...###.#......#.##...#",
             "..#.........##.#.#......#.......#..#...#.....#........#.....#..........#.....#.##.......#..#....",
             "#..#....#....##.#......#.###.....#.#.#.##.#.#..#..#.....#...#......#...###..........#....#..#...",
             ".....###...#.........#...#..#..#..#.....#.....##..#..#.#.........##......##...###.....#....#....",
             "#....#.#..##.##...#........#........#.....###.........#..#.#......#..##.....##.......#..#.#.##..",
             "#..####.#.#.##........#.........#..#......##....###.##.#.....#....#..........#......#.....##...#",
             ".#.#.##...#....#....#.#..........##..#..#.#..........#.......#..##...........#...........#.#....",
             "..##.#...#.........##.#...#.#....#.#..##.#..##......#..........#.........#....##.#.##.#.........",
             "........#..#...##.#.##...............#....#...#.#..........#......#...................##....#..#",
             ".......#....#..#.#..#.#......##.......#...#........#..#............#..#.#..#.....#.........#....",
             "#.....#.##...#....#.................#......#....#.#.....#....#.....#.#........#...#.#.....#.....",
             ".....#.......................#.#..#....###...#......##........#.............#........#..#..#....",
             "#.##.........#.....#......#......#..#...###................#....#...#..#..#....##..#..###.......",
             ".#......................##.#.#...#........#....##.##......#.#..............##............#..#.#.",
             ".#..####.......#......#......#.#...#.....#....#..............#.#..#.##.#...#............#.....#.",
            };

    cout << Solution2().find_monster(image) << endl;

    return 0;
}
